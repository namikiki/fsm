// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fsm/pkg/ent/dir"
	"fsm/pkg/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DirUpdate is the builder for updating Dir entities.
type DirUpdate struct {
	config
	hooks    []Hook
	mutation *DirMutation
}

// Where appends a list predicates to the DirUpdate builder.
func (du *DirUpdate) Where(ps ...predicate.Dir) *DirUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUserID sets the "user_id" field.
func (du *DirUpdate) SetUserID(s string) *DirUpdate {
	du.mutation.SetUserID(s)
	return du
}

// SetSyncID sets the "sync_id" field.
func (du *DirUpdate) SetSyncID(s string) *DirUpdate {
	du.mutation.SetSyncID(s)
	return du
}

// SetDir sets the "dir" field.
func (du *DirUpdate) SetDir(s string) *DirUpdate {
	du.mutation.SetDir(s)
	return du
}

// SetLevel sets the "level" field.
func (du *DirUpdate) SetLevel(u uint64) *DirUpdate {
	du.mutation.ResetLevel()
	du.mutation.SetLevel(u)
	return du
}

// AddLevel adds u to the "level" field.
func (du *DirUpdate) AddLevel(u int64) *DirUpdate {
	du.mutation.AddLevel(u)
	return du
}

// SetDeleted sets the "deleted" field.
func (du *DirUpdate) SetDeleted(b bool) *DirUpdate {
	du.mutation.SetDeleted(b)
	return du
}

// SetCreateTime sets the "create_time" field.
func (du *DirUpdate) SetCreateTime(t time.Time) *DirUpdate {
	du.mutation.SetCreateTime(t)
	return du
}

// SetModTime sets the "mod_time" field.
func (du *DirUpdate) SetModTime(t time.Time) *DirUpdate {
	du.mutation.SetModTime(t)
	return du
}

// Mutation returns the DirMutation object of the builder.
func (du *DirUpdate) Mutation() *DirMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DirUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DirMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DirUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DirUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DirUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DirUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dir.Table,
			Columns: dir.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dir.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dir.FieldUserID,
		})
	}
	if value, ok := du.mutation.SyncID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dir.FieldSyncID,
		})
	}
	if value, ok := du.mutation.Dir(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dir.FieldDir,
		})
	}
	if value, ok := du.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: dir.FieldLevel,
		})
	}
	if value, ok := du.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: dir.FieldLevel,
		})
	}
	if value, ok := du.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dir.FieldDeleted,
		})
	}
	if value, ok := du.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dir.FieldCreateTime,
		})
	}
	if value, ok := du.mutation.ModTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dir.FieldModTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dir.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DirUpdateOne is the builder for updating a single Dir entity.
type DirUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DirMutation
}

// SetUserID sets the "user_id" field.
func (duo *DirUpdateOne) SetUserID(s string) *DirUpdateOne {
	duo.mutation.SetUserID(s)
	return duo
}

// SetSyncID sets the "sync_id" field.
func (duo *DirUpdateOne) SetSyncID(s string) *DirUpdateOne {
	duo.mutation.SetSyncID(s)
	return duo
}

// SetDir sets the "dir" field.
func (duo *DirUpdateOne) SetDir(s string) *DirUpdateOne {
	duo.mutation.SetDir(s)
	return duo
}

// SetLevel sets the "level" field.
func (duo *DirUpdateOne) SetLevel(u uint64) *DirUpdateOne {
	duo.mutation.ResetLevel()
	duo.mutation.SetLevel(u)
	return duo
}

// AddLevel adds u to the "level" field.
func (duo *DirUpdateOne) AddLevel(u int64) *DirUpdateOne {
	duo.mutation.AddLevel(u)
	return duo
}

// SetDeleted sets the "deleted" field.
func (duo *DirUpdateOne) SetDeleted(b bool) *DirUpdateOne {
	duo.mutation.SetDeleted(b)
	return duo
}

// SetCreateTime sets the "create_time" field.
func (duo *DirUpdateOne) SetCreateTime(t time.Time) *DirUpdateOne {
	duo.mutation.SetCreateTime(t)
	return duo
}

// SetModTime sets the "mod_time" field.
func (duo *DirUpdateOne) SetModTime(t time.Time) *DirUpdateOne {
	duo.mutation.SetModTime(t)
	return duo
}

// Mutation returns the DirMutation object of the builder.
func (duo *DirUpdateOne) Mutation() *DirMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DirUpdateOne) Select(field string, fields ...string) *DirUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dir entity.
func (duo *DirUpdateOne) Save(ctx context.Context) (*Dir, error) {
	var (
		err  error
		node *Dir
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DirMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, duo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Dir)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DirMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DirUpdateOne) SaveX(ctx context.Context) *Dir {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DirUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DirUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DirUpdateOne) sqlSave(ctx context.Context) (_node *Dir, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dir.Table,
			Columns: dir.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dir.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dir.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dir.FieldID)
		for _, f := range fields {
			if !dir.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dir.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dir.FieldUserID,
		})
	}
	if value, ok := duo.mutation.SyncID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dir.FieldSyncID,
		})
	}
	if value, ok := duo.mutation.Dir(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dir.FieldDir,
		})
	}
	if value, ok := duo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: dir.FieldLevel,
		})
	}
	if value, ok := duo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: dir.FieldLevel,
		})
	}
	if value, ok := duo.mutation.Deleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: dir.FieldDeleted,
		})
	}
	if value, ok := duo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dir.FieldCreateTime,
		})
	}
	if value, ok := duo.mutation.ModTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dir.FieldModTime,
		})
	}
	_node = &Dir{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dir.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
