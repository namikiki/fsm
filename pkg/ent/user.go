// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"fsm/pkg/ent/user"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// PassWord holds the value of the "pass_word" field.
	PassWord string `json:"pass_word,omitempty"`
	// Salt holds the value of the "salt" field.
	Salt []byte `json:"salt,omitempty"`
	// UserName holds the value of the "user_name" field.
	UserName string `json:"user_name,omitempty"`
	// BucketName holds the value of the "bucket_name" field.
	BucketName string `json:"bucket_name,omitempty"`
	// CurrentStoreCap holds the value of the "current_store_cap" field.
	CurrentStoreCap int64 `json:"current_store_cap,omitempty"`
	// MaxStoreCap holds the value of the "max_store_cap" field.
	MaxStoreCap int64 `json:"max_store_cap,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldSalt:
			values[i] = new([]byte)
		case user.FieldCurrentStoreCap, user.FieldMaxStoreCap:
			values[i] = new(sql.NullInt64)
		case user.FieldID, user.FieldEmail, user.FieldPassWord, user.FieldUserName, user.FieldBucketName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pass_word", values[i])
			} else if value.Valid {
				u.PassWord = value.String
			}
		case user.FieldSalt:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field salt", values[i])
			} else if value != nil {
				u.Salt = *value
			}
		case user.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				u.UserName = value.String
			}
		case user.FieldBucketName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket_name", values[i])
			} else if value.Valid {
				u.BucketName = value.String
			}
		case user.FieldCurrentStoreCap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_store_cap", values[i])
			} else if value.Valid {
				u.CurrentStoreCap = value.Int64
			}
		case user.FieldMaxStoreCap:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_store_cap", values[i])
			} else if value.Valid {
				u.MaxStoreCap = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("pass_word=")
	builder.WriteString(u.PassWord)
	builder.WriteString(", ")
	builder.WriteString("salt=")
	builder.WriteString(fmt.Sprintf("%v", u.Salt))
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(u.UserName)
	builder.WriteString(", ")
	builder.WriteString("bucket_name=")
	builder.WriteString(u.BucketName)
	builder.WriteString(", ")
	builder.WriteString("current_store_cap=")
	builder.WriteString(fmt.Sprintf("%v", u.CurrentStoreCap))
	builder.WriteString(", ")
	builder.WriteString("max_store_cap=")
	builder.WriteString(fmt.Sprintf("%v", u.MaxStoreCap))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
