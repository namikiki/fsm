// Code generated by ent, DO NOT EDIT.

package dir

import (
	"fsm/pkg/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// SyncID applies equality check predicate on the "sync_id" field. It's identical to SyncIDEQ.
func SyncID(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncID), v))
	})
}

// Dir applies equality check predicate on the "dir" field. It's identical to DirEQ.
func Dir(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDir), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// ModTime applies equality check predicate on the "mod_time" field. It's identical to ModTimeEQ.
func ModTime(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModTime), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserID), v))
	})
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserID), v))
	})
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserID), v))
	})
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserID), v))
	})
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserID), v))
	})
}

// SyncIDEQ applies the EQ predicate on the "sync_id" field.
func SyncIDEQ(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncID), v))
	})
}

// SyncIDNEQ applies the NEQ predicate on the "sync_id" field.
func SyncIDNEQ(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSyncID), v))
	})
}

// SyncIDIn applies the In predicate on the "sync_id" field.
func SyncIDIn(vs ...string) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSyncID), v...))
	})
}

// SyncIDNotIn applies the NotIn predicate on the "sync_id" field.
func SyncIDNotIn(vs ...string) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSyncID), v...))
	})
}

// SyncIDGT applies the GT predicate on the "sync_id" field.
func SyncIDGT(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSyncID), v))
	})
}

// SyncIDGTE applies the GTE predicate on the "sync_id" field.
func SyncIDGTE(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSyncID), v))
	})
}

// SyncIDLT applies the LT predicate on the "sync_id" field.
func SyncIDLT(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSyncID), v))
	})
}

// SyncIDLTE applies the LTE predicate on the "sync_id" field.
func SyncIDLTE(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSyncID), v))
	})
}

// SyncIDContains applies the Contains predicate on the "sync_id" field.
func SyncIDContains(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSyncID), v))
	})
}

// SyncIDHasPrefix applies the HasPrefix predicate on the "sync_id" field.
func SyncIDHasPrefix(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSyncID), v))
	})
}

// SyncIDHasSuffix applies the HasSuffix predicate on the "sync_id" field.
func SyncIDHasSuffix(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSyncID), v))
	})
}

// SyncIDEqualFold applies the EqualFold predicate on the "sync_id" field.
func SyncIDEqualFold(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSyncID), v))
	})
}

// SyncIDContainsFold applies the ContainsFold predicate on the "sync_id" field.
func SyncIDContainsFold(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSyncID), v))
	})
}

// DirEQ applies the EQ predicate on the "dir" field.
func DirEQ(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDir), v))
	})
}

// DirNEQ applies the NEQ predicate on the "dir" field.
func DirNEQ(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDir), v))
	})
}

// DirIn applies the In predicate on the "dir" field.
func DirIn(vs ...string) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDir), v...))
	})
}

// DirNotIn applies the NotIn predicate on the "dir" field.
func DirNotIn(vs ...string) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDir), v...))
	})
}

// DirGT applies the GT predicate on the "dir" field.
func DirGT(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDir), v))
	})
}

// DirGTE applies the GTE predicate on the "dir" field.
func DirGTE(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDir), v))
	})
}

// DirLT applies the LT predicate on the "dir" field.
func DirLT(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDir), v))
	})
}

// DirLTE applies the LTE predicate on the "dir" field.
func DirLTE(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDir), v))
	})
}

// DirContains applies the Contains predicate on the "dir" field.
func DirContains(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDir), v))
	})
}

// DirHasPrefix applies the HasPrefix predicate on the "dir" field.
func DirHasPrefix(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDir), v))
	})
}

// DirHasSuffix applies the HasSuffix predicate on the "dir" field.
func DirHasSuffix(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDir), v))
	})
}

// DirEqualFold applies the EqualFold predicate on the "dir" field.
func DirEqualFold(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDir), v))
	})
}

// DirContainsFold applies the ContainsFold predicate on the "dir" field.
func DirContainsFold(v string) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDir), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int64) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int64) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// ModTimeEQ applies the EQ predicate on the "mod_time" field.
func ModTimeEQ(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldModTime), v))
	})
}

// ModTimeNEQ applies the NEQ predicate on the "mod_time" field.
func ModTimeNEQ(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldModTime), v))
	})
}

// ModTimeIn applies the In predicate on the "mod_time" field.
func ModTimeIn(vs ...int64) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldModTime), v...))
	})
}

// ModTimeNotIn applies the NotIn predicate on the "mod_time" field.
func ModTimeNotIn(vs ...int64) predicate.Dir {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldModTime), v...))
	})
}

// ModTimeGT applies the GT predicate on the "mod_time" field.
func ModTimeGT(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldModTime), v))
	})
}

// ModTimeGTE applies the GTE predicate on the "mod_time" field.
func ModTimeGTE(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldModTime), v))
	})
}

// ModTimeLT applies the LT predicate on the "mod_time" field.
func ModTimeLT(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldModTime), v))
	})
}

// ModTimeLTE applies the LTE predicate on the "mod_time" field.
func ModTimeLTE(v int64) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldModTime), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Dir) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Dir) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Dir) predicate.Dir {
	return predicate.Dir(func(s *sql.Selector) {
		p(s.Not())
	})
}
