// Code generated by ent, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassWord holds the string denoting the pass_word field in the database.
	FieldPassWord = "pass_word"
	// FieldSalt holds the string denoting the salt field in the database.
	FieldSalt = "salt"
	// FieldUserName holds the string denoting the user_name field in the database.
	FieldUserName = "user_name"
	// FieldBucketName holds the string denoting the bucket_name field in the database.
	FieldBucketName = "bucket_name"
	// FieldCurrentStoreCap holds the string denoting the current_store_cap field in the database.
	FieldCurrentStoreCap = "current_store_cap"
	// FieldMaxStoreCap holds the string denoting the max_store_cap field in the database.
	FieldMaxStoreCap = "max_store_cap"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassWord,
	FieldSalt,
	FieldUserName,
	FieldBucketName,
	FieldCurrentStoreCap,
	FieldMaxStoreCap,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PassWordValidator is a validator for the "pass_word" field. It is called by the builders before save.
	PassWordValidator func(string) error
	// UserNameValidator is a validator for the "user_name" field. It is called by the builders before save.
	UserNameValidator func(string) error
)
